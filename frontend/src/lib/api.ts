import { StoryInput, StorySegment } from '../types/story';

const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000/api/v1';

// Helper function to handle API requests
async function fetchAPI(endpoint: string, options: RequestInit = {}) {
  const url = `${API_BASE_URL}${endpoint}`;
  try {
    const response = await fetch(url, {
      ...options,
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        ...options.headers,
      },
      credentials: 'include',
    });

    
    if (!response.ok) {
      let errorData;
      const responseText = await response.text();
      try {
        errorData = JSON.parse(responseText);
      } catch (e) {
        throw new Error(`HTTP error! status: ${response.status} - ${response.statusText}\n${responseText}`);
      }
      
      const errorMessage = errorData.detail || 
                         errorData.message || 
                         `HTTP error! status: ${response.status} ${response.statusText}`;
      console.error('Error message:', errorMessage);
      throw new Error(errorMessage);
    }

    // Handle empty responses
    const text = await response.text();
    if (!text) return {};
    
    try {
      return JSON.parse(text);
    } catch (e) {
      throw new Error('Invalid JSON response from server');
    }
  } catch (error: unknown) {
    const errorMessage = error instanceof Error ? error.message : 'Unknown network or API error';
    throw new Error(`Failed to fetch from API: ${errorMessage}`);
  }
}

export const storyApi = {
  // Start a new interactive story session
  async generateInitialSegment(storyInput: StoryInput): Promise<StorySegment> {
    try { 
      const storyResponse = await fetchAPI('/stories/create', {
        method: 'POST',
        body: JSON.stringify({
          title: storyInput.prompt,
          content: storyInput.prompt,
          story_type: storyInput.story_type,
          tone: storyInput.tone,
          visual_style: storyInput.visualStyle,
          language: 'en',
          culture: 'general',
          target_age_group: 'all',
          tags: []
        }),
      });
      
      if (!storyResponse.story_id) {
        throw new Error('Invalid story response: missing story_id');
      }

      // Start an interactive session
      const sessionResponse = await fetchAPI(`/interactive/start/${storyResponse.story_id}`, {
        method: 'POST',
        body: JSON.stringify({}),
      });
         
      if (!sessionResponse.session_id) {
        throw new Error('Invalid session response: missing session_id');
      }

      // Generate initial image based on the first scene
      let imageUrl = '';
      try {
        imageUrl = await this.generateImage(
          `Create an image for a story with this description: ${storyInput.prompt}`,
          storyInput.visualStyle
        );
      } catch (error) {
        console.error('Error generating image:', error);
        // Continue without image if generation fails
      }

      // Map the response to the StorySegment type
      return {
        id: sessionResponse.session_id,
        text: storyResponse.enhanced_content || sessionResponse.current_scene || 'Welcome to your interactive story!',
        imageUrl: imageUrl,
        audioUrl: '', // Will be generated by the client if needed
        choices: sessionResponse.current_choices?.map((choice: any) => ({
          id: choice.choice_id,
          text: choice.choice_text
        })) || storyResponse.choices?.map((choice: any, index: number) => ({
          id: choice.choice_id || `choice-${index}`,
          text: choice.choice_text || `Choice ${index + 1}`
        })) || [
          { id: '1', text: 'Begin the story' },
          { id: '2', text: 'Learn more' },
          { id: '3', text: 'Skip ahead' }
        ]
      };
    } catch (error: unknown) {
      const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred';
      console.error('Error generating initial segment:', error);
      // Return a fallback response if the API call fails
      return {
        id: 'fallback-' + Date.now(),
        text: `Error: Could not connect to the story server. Please try again later. (${errorMessage})`,
        imageUrl: '',
        audioUrl: '',
        choices: [
          { id: 'retry', text: 'Retry' },
          { id: 'exit', text: 'Exit' }
        ]
      };
    }
  },

  // Generate next story segment based on user choice
  async generateNextSegment(choiceId: string, sessionId: string): Promise<StorySegment> {
    try {
      const response = await fetchAPI(`/interactive/choice`, {
        method: 'POST',
        body: JSON.stringify({
          session_id: sessionId,
          choice_id: choiceId,
        }),
      });
      // Generate image for the new scene if needed
      const imageUrl = response.updated_scene 
        ? await this.generateImage(
            `Create an image for this story scene: ${response.updated_scene.substring(0, 200)}`,
            'vivid' // Default style, can be customized
          )
        : '';

      return {
        id: sessionId, // Keep the same session ID
        text: response.updated_scene || 'The story continues...',
        imageUrl: imageUrl || response.image_url || '',
        audioUrl: response.audio_url || '',
        choices: response.available_choices?.map((choice: any, index: number) => ({
          id: choice.id || `choice-${index}`,
          text: choice.text || `Option ${index + 1}`,
        })) || [
          { id: 'continue', text: 'Continue' },
          { id: 'back', text: 'Go back' }
        ],
      };
    } catch (error: unknown) {
      const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred';
      console.error('Error generating next segment:', error);
      // Return a fallback response if the API call fails
      return {
        id: sessionId,
        text: `Error: Could not process your choice. (${errorMessage})`,
        imageUrl: '',
        audioUrl: '',
        choices: [
          { id: 'retry', text: 'Try again' },
          { id: 'restart', text: 'Start over' }
        ]
      };
    }
  },

  // Generate TTS audio for story text
  async generateAudio(text: string, voiceStyle: string = 'narrative'): Promise<string> {
    if (!text) return '';
    
    try {
      const response = await fetchAPI('/media/generate-audio', {
        method: 'POST',
        body: JSON.stringify({ 
          text: text,
          voice_style: voiceStyle,
          language: 'en',
          accent: 'us'
        }),
      });
      console.log(response);
      const audioId = response.audio_id || '';
      if (audioId) {
        return `${API_BASE_URL}/media/audio/${audioId}.mp3`;
      }
      return '';
    } catch (error) {
      console.error('Error generating audio:', error);
      return '';
    }
  },

  // Generate image based on story description
  async generateImage(description: string, style: string = 'illustration'): Promise<string> {
    if (!description) return '';
    
    try {
      const response = await fetchAPI('/media/generate-visual', {
        method: 'POST',
        body: JSON.stringify({ 
          description:"String",
          story_context: description,
          style: "illustration"
        }),
      });
      
      const imageId = response.image_id || '';
      if (imageId) {
        return `${API_BASE_URL}/media/image/image_${imageId}.png`;
      }
      return '';
    } catch (error) {
      console.error('Error generating image:', error);
      return '';
    }
  }
};
